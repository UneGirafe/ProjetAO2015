package curves;

import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Observable;

import javax.swing.AbstractListModel;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.ListModel;
import javax.swing.event.ListDataListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import function.Function;
import function.Functions;
import function.SyntaxErrorException;


public class DocumentWidget extends Observable {
	private JTextField functionField;
	private JPanel widget;
	private JButton loader;
	private JButton saver;
	private JButton drawButton;
	private JButton addButton; //to add a function manually
	private JButton removeButton;
	private JFileChooser fileChooser;
	private JComboBox<String> cbFunctions;
	private JList availableFunctionsList;
	private JList drawnFunctionsList;
	private DefaultListModel availableFun;
	private DefaultListModel drawnFun; 
	private Map<String,Function> functionsList;


	public DocumentWidget(){
		/*		widget.setLayout(new GridBagLayout());
	    GridBagConstraints c = new GridBagConstraints();
	    c.insets = new Insets(5,5,5,5);*/

		widget = new JPanel();
		availableFun = new DefaultListModel();
		drawnFun = new DefaultListModel();
		availableFunctionsList = new JList(availableFun);
		drawnFunctionsList = new JList(drawnFun);
		cbFunctions = new JComboBox<>();
		fileChooser = new JFileChooser();
		functionField = new JTextField(3);

		functionsList = new HashMap<String, Function>();

		//Available function's list
		availableFun.addElement("TEST !");
		availableFunctionsList.addListSelectionListener(new ListSelectionListener() {
			@Override
			public void valueChanged(ListSelectionEvent e) {
				if (e.getValueIsAdjusting() == false) {

					if (availableFunctionsList.getSelectedIndex() == -1) {
						//No selection, disable add button.
						drawButton.setEnabled(false);
					} else {
						//Selection, enable the add button.
						drawButton.setEnabled(true);
					}
				}

			}
		});

		drawnFun.addElement("PRINTED");
		drawnFunctionsList.addListSelectionListener(new ListSelectionListener() {
			@Override
			public void valueChanged(ListSelectionEvent e) {
				if (e.getValueIsAdjusting() == false) {
					if (availableFunctionsList.getSelectedIndex() == -1) {
						//No selection, disable add button.
						removeButton.setEnabled(false);
					} else {
						//Selection, enable the add button.
						removeButton.setEnabled(true);
					}
				}

			}
		});


		/*		//Combo box
		cbFunctions = new JComboBox<String>();
		cbFunctions.addItemListener(new ItemListener() {
			@Override
			public void itemStateChanged(ItemEvent e) {
				if (e.getStateChange() == ItemEvent.SELECTED){
					String item = e.getItem().toString();
					applyFunction(item);
				}
			}
		});

		widget.add(cbFunctions);*/

		//Saver
		saver = new JButton("Sauvegarder");
		saver.addMouseListener(new MouseAdapter() {
			@Override 
			public void mouseClicked(MouseEvent e){
				fileChooser.showSaveDialog(saver);
				save(fileChooser.getSelectedFile());
			}
		});



		//Loader
		loader = new JButton("Importer a partir d'un fichier");
		loader.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				fileChooser.showOpenDialog(loader);
				System.out.println("fichier choisi : " + fileChooser.getSelectedFile()); //trace
				load(fileChooser.getSelectedFile());
			}
		});

		//Button to add manually a function to the drawn list
		drawButton = new JButton("Dessiner");
		drawButton.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				Function fun;
				try {
					fun = Functions.parse(functionField.getText());
					drawFunction(fun);
				} catch (SyntaxErrorException | IOException e1) {
					System.out.println("Ajout impossible, function non valide.");
					System.out.println(e1.getMessage());
					e1.printStackTrace();
				}
			}
		});

		//button to remove a drawn function
		removeButton = new JButton("Retirer");
		removeButton.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				//removeFunction((String) drawnFunctionsList.getSelectedValue());
			}
		});

		//button to manually add a function to the drawn list
		addButton = new JButton("Ajouter manuellement");
		addButton.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				addFunction(functionField.getText());
			}
		});
		
		
		/*	    c.gridx = 0;
	    c.gridy = 0;
	    c.gridwidth = 1;
		c.gridheight = 1;
		c.fill = GridBagConstraints.HORIZONTAL;*/

		widget.add(functionField);

		/*		c.gridx = 1;
		c.gridheight = 10;
		c.gridwidth = 20;*/

		widget.add(availableFunctionsList);

		widget.add(drawnFunctionsList);

		/*		c.gridx = 2;
	    c.gridwidth = 1;
		c.gridheight = 1;*/
		widget.add(saver);

		widget.add(loader);

		widget.add(drawButton);

		widget.add(removeButton);
		
		widget.add(addButton);

	}

	//NE FONCTIONNE PAS
	public void drawFunction(Function function){
		//remove from the available functions' list
		

		//repaint the CURVE TO BE IMPLEMENTED
	}

	public boolean functionFound(String txt){
		boolean isFound = false;
		for ( int i=0 ; i<functionsList.size() ; i++ ){
			if ( functionsList.containsKey(txt) ){
				isFound = true;
			}
		}
		return isFound;
	}

	public void addFunction(String txt) {
		try {
			System.out.println("ligne à ajouter : " + txt);
			Function fun;
			fun = Functions.parse(txt); //convert String to Function
			//If function does not exist --> add it
			if ( ! functionFound(txt) ){
				//add to the map
				functionsList.put(txt , fun);
				//add to the List Model
				availableFun.addElement(txt);
				//Repaint the list
				availableFunctionsList.updateUI();
			} else {
				System.out.println("Cette fonction existe deja, ajout impossible.");
			}
		} catch (SyntaxErrorException | IOException e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
		}
	}

	public void availableToDrawn(String func){
		
		
	}
	public void removeFunction(String func, JList list){
		if (list == drawnFunctionsList ){
		//remove the entry from the drawned list
		drawnFun.removeElement(func);
		drawnFunctionsList.updateUI();


		// remove the CURVE ON THE GRAPH !
		//TO BE IMPLEMENTED


		//add the function to the available function's list
		addFunction(func);}
		
	}

	public void load(File f){
		try (BufferedReader reader = new BufferedReader( new FileReader(f))) {//try-with-ressources
			//libere la ressource des que la vaiable n'est plus utilisee
			String line;
			// while data is read
			while ((line = reader.readLine()) != null ){ 
				//add the function only if function does not already exist
				if (functionsList.containsKey(line)){
					System.out.println("ligne rejetee car deja importee" + line );
				} else {
					addFunction(line);
				}
			}
			//USELESS : Print the map
			/*			for (String i : this.functionsList.keySet() ){
				String key = i.toString();
				String value = this.functionsList.get(key);
				System.out.println("cle : " + key + " || valeur : " + value);
			}*/
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public void save(File f){
		try (BufferedWriter writer = new BufferedWriter(new FileWriter(f,true))){
			f.createNewFile();
			//for each function contained in map
			for (String i : this.functionsList.keySet()){
				String key = i.toString();
				writer.write(key );
				writer.newLine();
			}
		} catch (IOException e) {
			System.out.println(e.getMessage());
			e.printStackTrace();
		}	
	}


	public JPanel getWidget() {
		return widget;
	}	
}
